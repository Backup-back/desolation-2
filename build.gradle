plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        name = "dblsaiko"
        url = "https://maven.dblsaiko.net/"
    }
    maven {
        url = 'https://maven.minecraftforge.net/'
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven"
    }
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/releases/"
    }
    maven {
        name = "Ladysnake Libs"
        url = "https://maven.ladysnake.org/releases"
    }

    // TerraBlender (Biolith dev dep for now)
    maven {
        url = 'https://maven.minecraftforge.net/'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"

    include(modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}")) {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation 'com.github.glitchfiend:TerraBlender-fabric:1.19.2-2.0.1.166'
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

	modImplementation 'software.bernie.geckolib:geckolib-fabric-1.19:3.1.40:dev'

    modImplementation "dev.emi:trinkets:${project.trinkets_version}"

    //modRuntime "me.shedaniel:RoughlyEnoughItems:5.8.9"
    //modRuntime "grondag:canvas-mc116:1.0.1267"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

loom {
    accessWidenerPath = file("src/main/resources/desolation.accesswidener")

    runs {
        datagen {
            server()

            name = "Data Generation"
            runDir = "build/datagen"

            vmArg("-Dfabric-api.datagen")
            vmArg("-Dfabric-api.datagen.output-dir=${file("src/main/generated")}")
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/main/generated"
            ]
        }
    }
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
